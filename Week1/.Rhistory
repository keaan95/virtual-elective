select(season, conf, team_name, team_abb, team_logo, win_pct, pts_diff)
diff_df <- nfl_stand %>% arrange(season, conf, desc(win_pct)) %>%
select(season, conf, team_name, team_abb, team_logo, win_pct, pts_diff)
ggplot(diff_df, aes(x = differential, y = win_percent)) +
geom_point()
ggplot(diff_df, aes(x = pts_diff, y = win_percent)) +
geom_point()
ggplot(diff_df, aes(x = pts_diff, y = win_pct)) +
geom_point()
ggplot(diff_df, aes(x = pts_diff, y = win_pct)) +
geom_point()  +
theme_minimal()
ggplot(diff_df, aes(x = pts_diff, y = win_pct)) +
geom_point()  +
theme_bw()
ggplot(diff_df, aes(x = pts_diff, y = win_pct)) +
geom_point()  +
theme_bw() +
ggthemes::theme_fivethirtyeight()
ggplot(diff_df, aes(x = pts_diff, y = win_pct)) +
geom_point()  +
theme_bw() +
ggthemes::theme_fivethirtyeight() +
geom_vline(size=2)
ggplot(diff_df, aes(x = pts_diff, y = win_pct)) +
geom_point()  +
theme_bw() +
ggthemes::theme_fivethirtyeight() +
geom_vline(size=2,xintercept=0)
ggplot(diff_df, aes(x = pts_diff, y = win_pct)) +
geom_point()  +
theme_bw() +
ggthemes::theme_fivethirtyeight() +
geom_vline(size=2,xintercept=0.2)
ggplot(diff_df, aes(x = pts_diff, y = win_pct)) +
geom_point()  +
theme_bw() +
ggthemes::theme_fivethirtyeight() +
geom_vline(size=0.5,xintercept=0)
nfl_stand %>%
mutate(
color = case_when(
season < 2020 && playoff_seed <= 6 ~ "blue",
season == 2020 && playoff_seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(diff_df, aes(x = pts_diff, y = win_pct)) +
geom_point()  +
theme_bw() +
ggthemes::theme_fivethirtyeight() +
geom_vline(size=0.5,xintercept=0)
names(nfl_stand)
nfl_stand %>%
mutate(
color = case_when(
season < 2020 && playoff_seed <= 6 ~ "blue",
season == 2020 && playoff_seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(nfl_stand, aes(x = pts_diff, y = win_pct)) +
geom_point()  +
theme_bw() +
ggthemes::theme_fivethirtyeight() +
geom_vline(size=0.5,xintercept=0)
names(nfl-stand)
names(nfl_stand)
head(nfl_stand)[,5]
head(nfl_stand)[1:5]
head(nfl_stand)
nfl_stand$div_losses
View(nfl_stand)
nfl_stand %>%
mutate(
color = case_when(
season < 2020 && seed <= 6 ~ "blue",
season == 2020 && seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(nfl_stand, aes(x = pts_diff, y = win_pct)) +
geom_point()  +
theme_bw() +
ggthemes::theme_fivethirtyeight() +
geom_vline(size=0.5,xintercept=0)
nfl_stand %>%
mutate(
color = case_when(
season < 2020 && seed <= 6 ~ "blue",
season == 2020 && seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(nfl_stand, aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color))
nfl_stand %>%
mutate(
color = case_when(
season < 2020 && seed <= 6 ~ "blue",
season == 2020 && seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color))
nfl_stand %>%
mutate(
color = case_when(
season < 2020 & seed <= 6 ~ "blue",
season == 2020 & seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color))
?case_when
nfl_stand %>%
mutate(
color = case_when(
season < 2020 & seed <= 6 ~ "blue",
season == 2020 & seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color))+
scale_color_identity() +
labs(x = "Points Differential", y = "Win Percent",
title = "Playoff teams typically have a positive point differential",
subtitle = "Data through week 15 of the 2020 NFL Season",
caption = "Plot: @thomas_mock | Data: ESPN")
nfl_stand %>%
mutate(
color = case_when(
season < 2020 & seed <= 6 ~ "blue",
season == 2020 & seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color))+
scale_color_identity() +
ggtext::geom_richtext(
data = playoff_label_scatter,
aes(x = differential, y = y, label = label, color = color),
fill = "#f0f0f0", label.color = NA, # remove background and outline
label.padding = grid::unit(rep(0, 4), "pt"), # remove padding
family = "Chivo", hjust = 0.1, fontface = "bold",
size = 8
) +
scale_color_identity() +
labs(x = "Points Differential", y = "Win Percent",
title = "Playoff teams typically have a positive point differential",
subtitle = "Data through week 15 of the 2020 NFL Season",
caption = str_to_upper("Plot: @thomas_mock | Data: ESPN")) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(.0, 1, by = .10)
) +
scale_x_continuous(
breaks = seq(-200, 250, by = 50)
)
install.packages("ggtext")
nfl_stand %>%
mutate(
color = case_when(
season < 2020 & seed <= 6 ~ "blue",
season == 2020 & seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color))+
scale_color_identity() +
ggtext::geom_richtext(
data = playoff_label_scatter,
aes(x = differential, y = y, label = label, color = color),
fill = "#f0f0f0", label.color = NA, # remove background and outline
label.padding = grid::unit(rep(0, 4), "pt"), # remove padding
family = "Chivo", hjust = 0.1, fontface = "bold",
size = 8
) +
scale_color_identity() +
labs(x = "Points Differential", y = "Win Percent",
title = "Playoff teams typically have a positive point differential",
subtitle = "Data through week 15 of the 2020 NFL Season",
caption = str_to_upper("Plot: @thomas_mock | Data: ESPN")) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(.0, 1, by = .10)
) +
scale_x_continuous(
breaks = seq(-200, 250, by = 50)
)
playoff_label_scatter <- tibble(
differential = c(25,-125), y = c(0.3, 0.8),
label = c("Missed<br>Playoffs", "Made<br>Playoffs"),
color = c("#D50A0A", "#013369")
)
nfl_stand %>%
mutate(
color = case_when(
season < 2020 & seed <= 6 ~ "blue",
season == 2020 & seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color))+
scale_color_identity() +
ggtext::geom_richtext(
data = playoff_label_scatter,
aes(x = differential, y = y, label = label, color = color),
fill = "#f0f0f0", label.color = NA, # remove background and outline
label.padding = grid::unit(rep(0, 4), "pt"), # remove padding
family = "Chivo", hjust = 0.1, fontface = "bold",
size = 8
) +
scale_color_identity() +
labs(x = "Points Differential", y = "Win Percent",
title = "Playoff teams typically have a positive point differential",
subtitle = "Data through week 15 of the 2020 NFL Season",
caption = str_to_upper("Plot: @thomas_mock | Data: ESPN")) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(.0, 1, by = .10)
) +
scale_x_continuous(
breaks = seq(-200, 250, by = 50)
)
nfl_stand %>%
mutate(
color = case_when(
season < 2020 & seed <= 6 ~ "blue",
season == 2020 & seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color))+
scale_color_identity() +
ggtext::geom_richtext(
data = playoff_label_scatter,
aes(x = differential, y = y, label = label, color = color),
fill = "#f0f0f0", label.color = NA, # remove background and outline
label.padding = grid::unit(rep(0, 4), "pt"), # remove padding
family = "Chivo", hjust = 0.1, fontface = "bold",
size = 8
) +
scale_color_identity() +
labs(x = "Points Differential", y = "Win Percent",
title = "Playoff teams typically have a positive point differential",
subtitle = "Data through week 15 of the 2020 NFL Season",
caption = str_to_upper("Plot: @thomas_mock | Data: ESPN")) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(.0, 1, by = .10)
) +
scale_x_continuous(
breaks = seq(-200, 250, by = 50)
)+
ggthemes::theme_fivethirtyeight()
nfl_stand %>%
mutate(
color = case_when(
season < 2020 & seed <= 6 ~ "blue",
season == 2020 & seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color))+
scale_color_identity() +
ggtext::geom_richtext(
data = playoff_label_scatter,
aes(x = differential, y = y, label = label, color = color),
fill = "#f0f0f0", label.color = NA, # remove background and outline
label.padding = grid::unit(rep(0, 4), "pt"), # remove padding
family = "Chivo", hjust = 0.1, fontface = "bold",
size = 8
) +
scale_color_identity() +
labs(x = "Points Differential", y = "Win Percent",
title = "Playoff teams typically have a positive point differential",
subtitle = "Data through week 15 of the 2020 NFL Season",
caption = str_to_upper("Plot: @thomas_mock | Data: ESPN")) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(.0, 1, by = .10)
) +
scale_x_continuous(
breaks = seq(-200, 250, by = 50)
)+
ggthemes::theme_fivethirtyeight()
install.packages("tidyverse")
install.packages("espnscrapeR")
install.packages("ggthemes")
install.packages("remotes")
remotes::install_github("jthomasmock/espnscrapeR")
library(espnscrapeR)
library(ggthemes)
require(tidyverse)
nfl_stand <- 2014:2020 %>%
map_dfr(get_nfl_standings)
nfl_stand %>%
arrange(year, conf, desc(win_percent)) %>%
select(year, conf, team_name, abb_name, logos, win_percent, differential)
nfl_stand$div_losses
diff_df <- nfl_stand %>% arrange(season, conf, desc(win_pct)) %>%
select(season, conf, team_name, team_abb, team_logo, win_pct, pts_diff)
playoff_label_scatter <- tibble(
differential = c(25,-125), y = c(0.3, 0.8),
label = c("Missed<br>Playoffs", "Made<br>Playoffs"),
color = c("#D50A0A", "#013369")
)
nfl_stand %>%
mutate(
color = case_when(
season < 2020 & seed <= 6 ~ "blue",
season == 2020 & seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color))+
scale_color_identity() +
ggtext::geom_richtext(
data = playoff_label_scatter,
aes(x = differential, y = y, label = label, color = color),
fill = "#f0f0f0", label.color = NA, # remove background and outline
label.padding = grid::unit(rep(0, 4), "pt"), # remove padding
family = "Chivo", hjust = 0.1, fontface = "bold",
size = 8
) +
scale_color_identity() +
labs(x = "Points Differential", y = "Win Percent",
title = "Playoff teams typically have a positive point differential",
subtitle = "Data through week 15 of the 2020 NFL Season",
caption = str_to_upper("Plot: @thomas_mock | Data: ESPN")) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(.0, 1, by = .10)
) +
scale_x_continuous(
breaks = seq(-200, 250, by = 50)
)+
ggthemes::theme_fivethirtyeight()
nfl_stand %>%
mutate(
color = case_when(
season < 2020 & seed <= 6 ~ "blue",
season == 2020 & seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 3, color = "#737373") +
geom_point(aes(color = color))+
scale_color_identity() +
ggtext::geom_richtext(
data = playoff_label_scatter,
aes(x = differential, y = y, label = label, color = color),
fill = "#f0f0f0", label.color = NA, # remove background and outline
label.padding = grid::unit(rep(0, 4), "pt"), # remove padding
family = "Chivo", hjust = 0.1, fontface = "bold",
size = 8
) +
scale_color_identity() +
labs(x = "Points Differential", y = "Win Percent",
title = "Playoff teams typically have a positive point differential",
subtitle = "Data through week 15 of the 2020 NFL Season",
caption = str_to_upper("Plot: @thomas_mock | Data: ESPN")) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(.0, 1, by = .10)
) +
scale_x_continuous(
breaks = seq(-200, 250, by = 50)
)+
ggthemes::theme_fivethirtyeight()
nfl_stand %>%
mutate(
color = case_when(
season < 2020 & seed <= 6 ~ "blue",
season == 2020 & seed <= 7 ~ "blue",
TRUE ~ "red"
)
) %>% ggplot(aes(x = pts_diff, y = win_pct)) +
geom_vline(xintercept = 0, size = 0.75, color = "#737373") +
geom_point(aes(color = color, size =2))+
scale_color_identity() +
ggtext::geom_richtext(
data = playoff_label_scatter,
aes(x = differential, y = y, label = label, color = color),
fill = "#f0f0f0", label.color = NA, # remove background and outline
label.padding = grid::unit(rep(0, 4), "pt"), # remove padding
family = "Chivo", hjust = 0.1, fontface = "bold",
size = 8
) +
scale_color_identity() +
labs(x = "Points Differential", y = "Win Percent",
title = "Playoff teams typically have a positive point differential",
subtitle = "Data through week 15 of the 2020 NFL Season",
caption = str_to_upper("Plot: @thomas_mock | Data: ESPN")) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(.0, 1, by = .10)
) +
scale_x_continuous(
breaks = seq(-200, 250, by = 50)
)+
ggthemes::theme_fivethirtyeight()
library(png)
library(extrafont)
install.packages("extrafont")
font_import()
library(extrafont)
font_import()
loadfonts(device = "postscript")
library(ggplot2)
p <- ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars)))
p + geom_text(family = "Arial")
library(extrafont)
m <- readPNG(system.file("img", "DoctorX.co.uk-Sq-BlackOnBlue.png", package="png"))
library(png)
m <- readPNG(system.file("img", "DoctorX.co.uk-Sq-BlackOnBlue.png", package="png"))
getwd()
m <- readPNG(system.file("img", "DoctorX.co.uk-Sq-BlackOnBlue.png", package="png"))
w <- matrix(rgb(m[,,1],m[,,2],m[,,3], m[,,4] * 0.2), nrow=dim(m)[1])
m <- readPNG(system.file("img", "DoctorX.co.uk-Sq-BlackOnBlue.png", package="png"))
magick::image_write(combined, "combinedlogo.png", format = "PNG")
install.packages("magick")
logo <- png::readPNG("DoctorX.co.uk-Sq-BlackOnBlue.png")
m <- png::readPNG("DoctorX.co.uk-Sq-BlackOnBlue.png")
w <- matrix(rgb(m[,,1],m[,,2],m[,,3], m[,,4] * 0.2), nrow=dim(m)[1])
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=-Inf, ymin=-Inf, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
require(grid)
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=-Inf, ymin=-Inf, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=-2.5, ymin=--1, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=-2.5, ymin=-1, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=-2.5, ymin=1, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=2.5, ymin=1, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom( xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=-Inf, ymin=-Inf, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
qplot(1:10, rnorm(10), geom = "blank")
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=-Inf, ymin=-Inf, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
w <- matrix(rgb(m[,,1],m[,,2],m[,,3], m[,,4] * 0.2), nrow=dim(m)[3])
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=-Inf, ymin=-Inf, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
w <- matrix(rgb(m[,,1],m[,,2],m[,,3], m[,,4] * 0.2), nrow=dim(m)[2])
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=-Inf, ymin=-Inf, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
w <- matrix(rgb(m[,,1],m[,,2],m[,,3], m[,,4] * 0.2), nrow=dim(m)[1])
qplot(1:10, rnorm(10), geom = "blank") +
annotation_custom(xmin=-Inf, ymin=-Inf, xmax=Inf, ymax=Inf,
rasterGrob(w)) + geom_point()
# Change to your local directory - in my case it is as follows:
setwd("C:/Users/keaan/OneDrive - Newcastle University/HLA - Virtual Elective/Week 1/")
df <- read.csv("data.csv")
# You can fetch your WORKING directory as follows
getwd()
# Change to your local directory - in my case it is as follows:
setwd("C:/Users/keaan/OneDrive - Newcastle University/HLA - Virtual Elective/Week 1/")
df <- read.csv("data.csv")
nrow (df)
ncol9df
ncol(df)
sum(df$diagnosis=="M")
sum(df$diagnosis=="B")
sum(df$radius_mean >= 13)
mdf <- df[df$diagnosis=="M",]
# Using our newly created dataframe:
sum(mdf$radius_mean >= 20)
# Alternatively, we can count the rows.
nrow(mdf[mdf$radius_mean >= 20,])
df$id
df["91504",]
df[,"91504"]
df["91504",,drop=FALSE]
df[df$id=="91504",]
df[df$id=="91504",,df$radius_mean]
Sys.getenv("R_GSCMD"
)
Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.54.0/bin/gswin64.exe")
knitr::opts_chunk$set(echo = FALSE)
set.seed(65)
require(caret)
results <- train(diagnosis~., data=trainData, method="rf", metric="ROC",
trControl = trainControl(method = "cv", number = 10,classProbs=TRUE,summaryFunction = twoClassSummary, savePredictions = T))
# You can fetch your WORKING directory as follows
getwd()
# Change to your local directory - in my case it is as follows:
setwd("C:/Users/keaan/OneDrive - Newcastle University/HLA - Virtual Elective/Week1/")
df <- read.csv("data.csv", sep=",",header=T,row.names = 1)
setwd("C:/Users/keaan/OneDrive - Newcastle University/HLA - Virtual Elective/Week1/")
